#pragma once

#include <vector>
using namespace std;

template<class ItemType>
class BagInterface
{
public:
    /** Gets the current number of entries in this bag.
     @return The integer number of entries currently in the bag. */
    virtual int getCurrentSize() const = 0;

    /** Sees whether this bag is empty.
     @return True if the bag is empty, or false if not. */
    virtual bool isEmpty() const = 0;

    /** Adds a new entry to this bag.
     @post  If successful, newEntry is stored in the bag and
        the count of items in the bag has increased by 1.
     @param newEntry  The object to be added as a new entry.
     @return  True if addition was successful, or false if not. */
    virtual bool add(const ItemType& newEntry) = 0;

    /** Removes one occurrence of a given entry from this bag,
        if possible.
     @post  If successful, anEntry has been removed from the bag
        and the count of items in the bag has decreased by 1.
     @param anEntry  The entry to be removed.
     @return  True if removal was successful, or false if not. */
    virtual bool remove(const ItemType& anEntry) = 0;

    /** Removes all entries from this bag.
     @post  Bag contains no items, and the count of items is 0. */
    virtual void clear() = 0;

    /** Counts the number of times a given entry appears in bag.
     @param anEntry  The entry to be counted.
     @return  The number of times anEntry appears in the bag. */
    virtual int getFrequencyOf(const ItemType& anEntry) const = 0;

    /** Tests whether this bag contains a given entry.
     @param anEntry  The entry to locate.
     @return  True if bag contains anEntry, or false otherwise. */
    virtual bool contains(const ItemType& anEntry) const = 0;

    /** Empties and then fills a given vector with all entries that
        are in this bag.
     @return  A vector containing all the entries in the bag. */
    virtual vector<ItemType> toVector() const = 0;
    /*Displays array*/
    virtual void display() const = 0;
    virtual void displayItem(int n) const = 0;   
    
}; // end BagInterface


***********************************************************************************
##include "BagInterface.h"
#include <iostream>
#include <cstddef>
#include <string>

template<class ItemType>
class ArrayBag : public BagInterface<ItemType>
{
private:
	static const int DEFAULT_CAPACITY = 15; // Small size to test for a full bag
	ItemType items[DEFAULT_CAPACITY];      // Array of bag items
	int itemCount;                         // Current count of bag items 
	int maxItems;                          // Max capacity of the bag

	// Returns either the index of the element in the array items that
	// contains the given target or -1, if the array does not contain 
	// the target.
	int getIndexOf(const ItemType& target) const;

public:
	ArrayBag();
	int getCurrentSize() const;
	bool isEmpty() const;
	bool add(const ItemType& newEntry);
	bool remove(const ItemType& anEntry);
	void clear();
	bool contains(const ItemType& anEntry) const;
	int getFrequencyOf(const ItemType& anEntry) const;
    void display() const;
    void displayItem(int n) const;
	vector<ItemType> toVector() const;
    //Basic Operations
    ArrayBag<ItemType> bagUnion(ArrayBag<ItemType>& aBag);
	ArrayBag<ItemType> bagIntersection(ArrayBag<ItemType>& aBag);
	ArrayBag<ItemType> bagDifference(ArrayBag<ItemType>& aBag);
}; // end ArrayBag


/**Implementation**/
template<class ItemType>
ArrayBag<ItemType>::ArrayBag() : itemCount(0), maxItems(DEFAULT_CAPACITY)
{
}  // end default constructor

template<class ItemType>
int ArrayBag<ItemType>::getCurrentSize() const
{
    return itemCount;
}  // end getCurrentSize

template<class ItemType>
bool ArrayBag<ItemType>::isEmpty() const
{
    return itemCount == 0;
}  // end isEmpty

template<class ItemType>
bool ArrayBag<ItemType>::add(const ItemType& newEntry)
{
    bool hasRoomToAdd = (itemCount < maxItems);
    if (hasRoomToAdd)
    {
        items[itemCount] = newEntry;
        itemCount++;
    }  // end if

    return hasRoomToAdd;
}  // end add
//
//template<class ItemType>
//bool ArrayBag<ItemType>::add(const ItemType& newEntry)
//{
//    bool hasRoomToAdd = (itemCount < maxItems);
//    if(!hasRoomToAdd)
//    {
//        ItemType*
//    }
//}
/*
// STUB
 template<class ItemType>
 bool ArrayBag<ItemType>::remove(const ItemType& anEntry)
 {
    return false; // STUB
 }  // end remove
*/

template<class ItemType>
bool ArrayBag<ItemType>::remove(const ItemType& anEntry)
{
    int locatedIndex = getIndexOf(anEntry);
    bool canRemoveItem = !isEmpty() && (locatedIndex > -1);
    if (canRemoveItem)
    {
        itemCount--;
        items[locatedIndex] = items[itemCount];
    }  // end if

    return canRemoveItem;
}  // end remove

/*
 // STUB
 template<class ItemType>
 void ArrayBag<ItemType>::clear()
 {
    // STUB
 }  // end clear
*/

template<class ItemType>
void ArrayBag<ItemType>::clear()
{
    itemCount = 0;
}  // end clear

template<class ItemType>
int ArrayBag<ItemType>::getFrequencyOf(const ItemType& anEntry) const
{
    int frequency = 0;
    int curIndex = 0;       // Current array index
    while (curIndex < itemCount)
    {
        if (items[curIndex] == anEntry)
        {
            frequency++;
        }  // end if

        curIndex++;          // Increment to next entry
    }  // end while

    return frequency;
}  // end getFrequencyOf

template<class ItemType>
bool ArrayBag<ItemType>::contains(const ItemType& anEntry) const
{
    return getIndexOf(anEntry) > -1;
}  // end contains

/* ALTERNATE 1: First version//Student implementation file
#include "Student.h"
using namespace std;

Student::Student()
{
	setStudent(" ", 000, "CS", 80, "FA", 0);
}//end constructor

Student::Student(string name, int studentNumber, string course, int section, string trimester, bool status) : name(name), studentNumber(studentNumber), course(course), section(section), trimester(trimester), status(status) 
{
}//end constructor

void Student::setStudent(string name, int studentNumber, string course, int section, string trimester, bool status)
{
	name = name;
	studentNumber = studentNumber;
	course = course;
	section = section;
	trimester = trimester;
	status = status;
}//end setStudent

template<class ItemType>
bool ArrayBag<ItemType>::contains(const ItemType& target) const
{
   return getFrequencyOf(target) > 0;
}  // end contains

// ALTERNATE 2: Second version
template<class ItemType>
bool ArrayBag<ItemType>::contains(const ItemType& anEntry) const
{
   bool found = false;
   int curIndex = 0;        // Current array index
   while (!found && (curIndex < itemCount))
   {
      if (anEntry == items[curIndex])
      {
         found = true;
      } // end if

      curIndex++;           // Increment to next entry
   }  // end while

   return found;
}  // end contains
*/

template<class ItemType>
vector<ItemType> ArrayBag<ItemType>::toVector() const
{
    vector<ItemType> bagContents;
    for (int i = 0; i < itemCount; i++)
        bagContents.push_back(items[i]);

    return bagContents;
}  // end toVector

// private
template<class ItemType>
int ArrayBag<ItemType>::getIndexOf(const ItemType& target) const
{
    bool found = false;
    int result = -1;
    int searchIndex = 0;

    // If the bag is empty, itemCount is zero, so loop is skipped
    while (!found && (searchIndex < itemCount))
    {
        if (items[searchIndex] == target)
        {
            found = true;
            result = searchIndex;
        }
        else
        {
            searchIndex++;
        }  // end if
    }  // end while

    return result;
}  // end getIndexOf
template<class ItemType>
void ArrayBag<ItemType>::display() const
{
    for (int count = 0; count < getCurrentSize(); count++) {

        std::cout << items[count] << "," << endl;
    }//end for
    cout << endl;
} //end display

template <class ItemType>
ArrayBag<ItemType> ArrayBag<ItemType>::bagUnion(ArrayBag<ItemType>& aBag)
{
    ArrayBag<ItemType> newBag;
    
    vector vector1 = toVector();
    
    for(int i = 0; i < getCurrentSize(); i++)
    {
        newBag.add(vector1.at(i));
    }//end for
    
    vector vector2 = aBag.toVector();
    for(int i = 0; i < aBag.getCurrentSize(); i++)
    {
        newBag.add(vector2.at(i));
    }
    return newBag;
}//end bagUnion

template <class ItemType>
ArrayBag<ItemType> ArrayBag<ItemType>::bagIntersection(ArrayBag<ItemType>& aBag)
{
    ArrayBag<ItemType> newBag;
    
    vector vector1 = toVector();
    vector vector2 = aBag.toVector();
    
    for(int i = 0; i < getCurrentSize(); i++)
    {
        if(aBag.contains(vector1.at(i)))
            newBag.add(vector1.at(i));
    }//end for
    return newBag;
}//end bagIntersection


template <class ItemType>
ArrayBag<ItemType> ArrayBag<ItemType>::bagDifference(ArrayBag<ItemType>& aBag)
{
    ArrayBag<ItemType> newBag;
    
    vector vector1 = toVector();
    vector vector2 = aBag.toVector();
    for(int i = 0; i < getCurrentSize(); i++)
    {
        if(!aBag.contains(vector1.at(i)))
            newBag.add(vector1.at(i));
    }//end for
    return newBag;
}//end bagDifference

template<class ItemType>
void ArrayBag<ItemType>::displayItem(int n) const
{
    std::cout << items[n];
}//end displayItem



*******************************************************************************
#pragma once

#include <iostream>
#include <string>

//Definition of Student class
class Student 
{
	//Private members
private:
	std::string name;	//stores student name
    std::string lastName;   //stores student last name
	int studentNumber; //stores student id number
	std::string course;	//stores student course
	int section;	//stores student course section
	std::string trimester;	//stores trimester 
	bool status;	//stores student enrollment status

	//Public members
public:
	//Constructors
	Student();	//constructor
	Student(std::string name, std::string lastName, int studentNumber, std::string course, int section, std::string trimester, bool status);	//parameter constructor
	//Mutator functions
	void setStudent(std::string name, std::string lastName, int studentNumber, std::string course, int section, std::string trimester, bool status);
	//Access functions
	std::string getName();
    std::string getLastName();
	void setStudentNumber(int number);
    int getStudentNumber();
	std::string getCourse();
    void setCourse(std::string aCourse);
	int getSection();
	std::string getTrimester();
	void setStatus(bool aStatus);
    bool getStatus();
	friend std::ostream& operator <<(std::ostream& out, Student const& obj);
	friend std::istream& operator >>(std::istream& in, Student& obj);
    bool operator ==(const Student& obj) const;
    void operator = (const Student& obj);
    
};//end class Student






**************************************************************************************
//Student implementation file
#include "Student.h"
using namespace std;

Student::Student()
{
	setStudent(" ", " ", 000, "CS", 80, "FA", 0);
}//end constructor

Student::Student(string name, string lastName, int studentNumber, string course, int section, string trimester, bool status) : name(name), lastName(lastName), studentNumber(studentNumber), course(course), section(section), trimester(trimester), status(status) 
{
}//end constructor

void Student::setStudent(string name, string lastName, int studentNumber, string course, int section, string trimester, bool status)
{
	name = name;
    lastName = lastName;
	studentNumber = studentNumber;
	course = course;
	section = section;
	trimester = trimester;
	status = status;
}//end setStudent


string Student::getName()
{
	return string(name);
}//end getName

string Student::getLastName()
{
    return string(lastName);
}//end getLastName

void Student::setStudentNumber(int number)
{
    studentNumber = number;
}//end setStudentNumber

int Student::getStudentNumber()
{
	return studentNumber;
}//end getStudentNumber

void Student::setCourse(std::string aCourse)
{
    course = aCourse;
}//end setCourse

string Student::getCourse()
{
	return string(course);
}//end getCourse

int Student::getSection()
{
	return section;
}//end getSection

string Student::getTrimester()
{
	return string(trimester);
}//end getTrimester

void Student::setStatus(bool aStatus)
{
    status = aStatus;
}//end setStatus

bool Student::getStatus()
{
	return status;
}//end getStatus

ostream& operator<<(ostream& out, Student const& obj)
{
	out << "Student Name: " << obj.name << "\n";
    out << "Student Last Name: " << obj.lastName << "\n";
	out << "Student Number: " << obj.studentNumber << "\n";
	out << "Student Course: " << obj.course << "\n";
	out << "Section: " << obj.section << "\n";
	out << "Trimester: " << obj.trimester << "\n";
	out << "Status: " << obj.status << "\n";

	return out;
}//end operator<<
istream& operator>>(istream& in, Student& obj)
{
	return in >> obj.name >> obj.lastName >> obj.studentNumber >> obj.course >> obj.section >> obj.trimester >> obj.status;
}//end operator>>

bool Student::operator ==(const Student& obj) const
{
    return studentNumber == obj.studentNumber;
}//end operator ==

void Student::operator =(const Student& obj)
{
    name = obj.name;	//stores student name
	studentNumber = obj.studentNumber; //stores student id number
	course = obj.course;	//stores student course
	section = obj.section;	//stores student course section
	trimester = obj.trimester;	//stores trimester 
	status = obj.status;	//stores student enrollment status
}//end operator =




***************************************************************************************
#include <iostream>
#include <string>
#include "ArrayBag.h"
#include "Student.h"
#include <vector>

//Prototype
void displayBag(ArrayBag<Student>&bag);

int main()
{
    ArrayBag<Student> list;
    ArrayBag<Student> list2;
    ArrayBag<Student> list3;
    
    Student student, student1;
    int stdNumber;
    int n;
    
    std::cout << "Enter number of students to add to list." << "\n";
    std::cin >> n;
    while(n < 0)
    {
        std::cout << "Number has to be positive." << "\n";
        std::cin >> n;
    }//end while    
    
    for(int i = 0; i < n; i++)
    {
        std::cout << "Enter Student Name, Number, Course, Section, Trimester and Status."
        << i + 1 << "\n";
        std::cin >> student;
        list.add(student);
        list2.add(student);
        list3.add(student);
    }//end for
    
    std::cout << "\n";
    list.display(); 
    std::cout <<"\n";
    
    /**1. Add new student to end of list**/
    std::cout << "Add student to list: " << "\n";
    std::cout << "Enter Student Name, Number, Course, Section, Trimester and Status." << "\n";
    std::cin >> student;
    list.add(student);
    list2.add(student);
    list3.add(student);
    list.display();
    std::cout << "\n";
    
    /**2. Remove a student from list**/
    std::cout << "Enter student number to remove from list. \n";
    std::cin >> stdNumber;
    student1.setStudentNumber(stdNumber);
    std::cout << "\n";
    
    //Remove Student from list
    list.remove(student1);
    list.display();
    std::cout << "\n";
    
    system("pause");
    
    /**3.Organize list of student**/
    
    
    
    
//    /******************************/
    
    /**4.Print list of students that are taking courses**/
    ArrayBag<Student> tempBag;
    Student temp;
    std::string aCourse;
    
    std::cout << "\n";
    std::cout << "What course do you want to check for enrollment? \n";
    std::cin >> aCourse;
    temp.setCourse(aCourse); 
    
    while(!list2.contains(temp))
    {
        list2.remove(student);
    }//end while
    list2.display();
    
    
    std::cout << "\n";
    
    return 0;
}//end main  

void displayBag(ArrayBag<Student>&bag)
{
    cout << "The bag contains " << bag.getCurrentSize()
        << " items:" << endl;
    vector<Student> bagItems = bag.toVector();

    int numberOfEntries = (int)bagItems.size();
    for (int i = 0; i < numberOfEntries; i++)
    {
        cout << bagItems[i] << " ";
    }  // end for
    cout << endl << endl;
}  // end displayBag






***************************************************************
salida
Enter number of students to add to list.
5
Enter Student Name, Number, Course, Section, Trimester and Status.1
Bryan Chavez 70045 CECS3212 80 FA 1
Enter Student Name, Number, Course, Section, Trimester and Status.2
Arianisis Mangual 70098 CECS2210 80 WI 0
Enter Student Name, Number, Course, Section, Trimester and Status.3
Roxy Cleopatra 65789 ME2410 80 FA 1
Enter Student Name, Number, Course, Section, Trimester and Status.4
Sofia Valeria 78900 CECS2233 08 SP 0
Enter Student Name, Number, Course, Section, Trimester and Status.5
Andrea Bourke 65098 ME3210 80 FA 1

Student Name: Bryan
Student Last Name: 
Student Number: 70045
Student Course: CECS3212
Section: 80
Trimester: FA
Status: 1
,
Student Name: Arianisis
Student Last Name: 
Student Number: 70098
Student Course: CECS2210
Section: 80
Trimester: WI
Status: 0
,
Student Name: Roxy
Student Last Name: 
Student Number: 65789
Student Course: ME2410
Section: 80
Trimester: FA
Status: 1
,
Student Name: Sofia
Student Last Name: 
Student Number: 78900
Student Course: CECS2233
Section: 8
Trimester: SP
Status: 0
,
Student Name: Andrea
Student Last Name: 
Student Number: 65098
Student Course: ME3210
Section: 80
Trimester: FA
Status: 1
,


Add student to list: 
Enter Student Name, Number, Course, Section, Trimester and Status.
Fabio Aleman 76900 CECS2222 80 FA 1
Student Name: Bryan
Student Last Name: 
Student Number: 70045
Student Course: CECS3212
Section: 80
Trimester: FA
Status: 1
,
Student Name: Arianisis
Student Last Name: 
Student Number: 70098
Student Course: CECS2210
Section: 80
Trimester: WI
Status: 0
,
Student Name: Roxy
Student Last Name: 
Student Number: 65789
Student Course: ME2410
Section: 80
Trimester: FA
Status: 1
,
Student Name: Sofia
Student Last Name: 
Student Number: 78900
Student Course: CECS2233
Section: 8
Trimester: SP
Status: 0
,
Student Name: Andrea
Student Last Name: 
Student Number: 65098
Student Course: ME3210
Section: 80
Trimester: FA
Status: 1
,
Student Name: Fabio
Student Last Name: 
Student Number: 76900
Student Course: CECS2222
Section: 80
Trimester: FA
Status: 1
,


Enter student number to remove from list. 
65789

Student Name: Bryan
Student Last Name: 
Student Number: 70045
Student Course: CECS3212
Section: 80
Trimester: FA
Status: 1
,
Student Name: Arianisis
Student Last Name: 
Student Number: 70098
Student Course: CECS2210
Section: 80
Trimester: WI
Status: 0
,
Student Name: Fabio
Student Last Name: 
Student Number: 76900
Student Course: CECS2222
Section: 80
Trimester: FA
Status: 1
,
Student Name: Sofia
Student Last Name: 
Student Number: 78900
Student Course: CECS2233
Section: 8
Trimester: SP
Status: 0
,
Student Name: Andrea
Student Last Name: 
Student Number: 65098
Student Course: ME3210
Section: 80
Trimester: FA
Status: 1
,


sh: 1: pause: not found

What course do you want to check for enrollment? 
ME3210

