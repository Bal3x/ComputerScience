#pragma once

#include <vector>
using namespace std;

template<class ItemType>
class BagInterface
{
public:
    /** Gets the current number of entries in this bag.
     @return The integer number of entries currently in the bag. */
    virtual int getCurrentSize() const = 0;

    /** Sees whether this bag is empty.
     @return True if the bag is empty, or false if not. */
    virtual bool isEmpty() const = 0;

    /** Adds a new entry to this bag.
     @post  If successful, newEntry is stored in the bag and
        the count of items in the bag has increased by 1.
     @param newEntry  The object to be added as a new entry.
     @return  True if addition was successful, or false if not. */
    virtual bool add(const ItemType& newEntry) = 0;

    /** Removes one occurrence of a given entry from this bag,
        if possible.
     @post  If successful, anEntry has been removed from the bag
        and the count of items in the bag has decreased by 1.
     @param anEntry  The entry to be removed.
     @return  True if removal was successful, or false if not. */
    virtual bool remove(const ItemType& anEntry) = 0;

    /** Removes all entries from this bag.
     @post  Bag contains no items, and the count of items is 0. */
    virtual void clear() = 0;

    /** Counts the number of times a given entry appears in bag.
     @param anEntry  The entry to be counted.
     @return  The number of times anEntry appears in the bag. */
    virtual int getFrequencyOf(const ItemType& anEntry) const = 0;

    /** Tests whether this bag contains a given entry.
     @param anEntry  The entry to locate.
     @return  True if bag contains anEntry, or false otherwise. */
    virtual bool contains(const ItemType& anEntry) const = 0;

    /** Empties and then fills a given vector with all entries that
        are in this bag.
     @return  A vector containing all the entries in the bag. */
    virtual vector<ItemType> toVector() const = 0;
    /*Displays array*/
    virtual void display() const = 0;
    /**Joins two bags**/
//    virtual ItemType<ItemType> bagUnion(ItemType& aBag) = 0;
//    /**Method finds the common entries in two bags**/
//    virtual ItemType<ItemType> bagIntersection(ItemType& aBag) = 0;
//    /**Method that finds the difference between two bags**/
//    virtual ItemType<ItemType> bagDifference(ItemType& aBag) = 0;
    
}; // end BagInterface




#include "BagInterface.h"
#include <iostream>
#include <cstddef>
#include <string>

template<class ItemType>
class ArrayBag : public BagInterface<ItemType>
{
private:
	static const int DEFAULT_CAPACITY = 6; // Small size to test for a full bag
	ItemType items[DEFAULT_CAPACITY];      // Array of bag items
	int itemCount;                         // Current count of bag items 
	int maxItems;                          // Max capacity of the bag

	// Returns either the index of the element in the array items that
	// contains the given target or -1, if the array does not contain 
	// the target.
	int getIndexOf(const ItemType& target) const;

public:
	ArrayBag();
	int getCurrentSize() const;
	bool isEmpty() const;
	bool add(const ItemType& newEntry);
	bool remove(const ItemType& anEntry);
	void clear();
	bool contains(const ItemType& anEntry) const;
	int getFrequencyOf(const ItemType& anEntry) const;
    void display() const;
	vector<ItemType> toVector() const;
    ArrayBag<ItemType> bagUnion(ArrayBag<ItemType>& aBag);
	ArrayBag<ItemType> bagIntersection(ArrayBag<ItemType>& aBag);
	ArrayBag<ItemType> bagDifference(ArrayBag<ItemType>& aBag);
}; // end ArrayBag


/**Implementation**/
template<class ItemType>
ArrayBag<ItemType>::ArrayBag() : itemCount(0), maxItems(DEFAULT_CAPACITY)
{
}  // end default constructor

template<class ItemType>
int ArrayBag<ItemType>::getCurrentSize() const
{
    return itemCount;
}  // end getCurrentSize

template<class ItemType>
bool ArrayBag<ItemType>::isEmpty() const
{
    return itemCount == 0;
}  // end isEmpty

template<class ItemType>
bool ArrayBag<ItemType>::add(const ItemType& newEntry)
{
    bool hasRoomToAdd = (itemCount < maxItems);
    if (hasRoomToAdd)
    {
        items[itemCount] = newEntry;
        itemCount++;
    }  // end if

    return hasRoomToAdd;
}  // end add

/*
// STUB
 template<class ItemType>
 bool ArrayBag<ItemType>::remove(const ItemType& anEntry)
 {
    return false; // STUB
 }  // end remove
*/

template<class ItemType>
bool ArrayBag<ItemType>::remove(const ItemType& anEntry)
{
    int locatedIndex = getIndexOf(anEntry);
    bool canRemoveItem = !isEmpty() && (locatedIndex > -1);
    if (canRemoveItem)
    {
        itemCount--;
        items[locatedIndex] = items[itemCount];
    }  // end if

    return canRemoveItem;
}  // end remove

/*
 // STUB
 template<class ItemType>
 void ArrayBag<ItemType>::clear()
 {
    // STUB
 }  // end clear
*/

template<class ItemType>
void ArrayBag<ItemType>::clear()
{
    itemCount = 0;
}  // end clear

template<class ItemType>
int ArrayBag<ItemType>::getFrequencyOf(const ItemType& anEntry) const
{
    int frequency = 0;
    int curIndex = 0;       // Current array index
    while (curIndex < itemCount)
    {
        if (items[curIndex] == anEntry)
        {
            frequency++;
        }  // end if

        curIndex++;          // Increment to next entry
    }  // end while

    return frequency;
}  // end getFrequencyOf

template<class ItemType>
bool ArrayBag<ItemType>::contains(const ItemType& anEntry) const
{
    return getIndexOf(anEntry) > -1;
}  // end contains

/* ALTERNATE 1: First version
template<class ItemType>
bool ArrayBag<ItemType>::contains(const ItemType& target) const
{
   return getFrequencyOf(target) > 0;
}  // end contains

// ALTERNATE 2: Second version
template<class ItemType>
bool ArrayBag<ItemType>::contains(const ItemType& anEntry) const
{
   bool found = false;
   int curIndex = 0;        // Current array index
   while (!found && (curIndex < itemCount))
   {
      if (anEntry == items[curIndex])
      {
         found = true;
      } // end if

      curIndex++;           // Increment to next entry
   }  // end while

   return found;
}  // end contains
*/

template<class ItemType>
vector<ItemType> ArrayBag<ItemType>::toVector() const
{
    vector<ItemType> bagContents;
    for (int i = 0; i < itemCount; i++)
        bagContents.push_back(items[i]);

    return bagContents;
}  // end toVector

// private
template<class ItemType>
int ArrayBag<ItemType>::getIndexOf(const ItemType& target) const
{
    bool found = false;
    int result = -1;
    int searchIndex = 0;

    // If the bag is empty, itemCount is zero, so loop is skipped
    while (!found && (searchIndex < itemCount))
    {
        if (items[searchIndex] == target)
        {
            found = true;
            result = searchIndex;
        }
        else
        {
            searchIndex++;
        }  // end if
    }  // end while

    return result;
}  // end getIndexOf
template<class ItemType>
void ArrayBag<ItemType>::display() const

{

    for (int count = 0; count < getCurrentSize(); count++) {

        std::cout << items[count] << ",";

    }//end for

    cout << endl;

} //end display

template <class ItemType>
ArrayBag<ItemType> ArrayBag<ItemType>::bagUnion(ArrayBag<ItemType>& aBag)
{
    ArrayBag<ItemType> newBag;
    
    vector vector1 = toVector();
    
    for(int i = 0; i < getCurrentSize(); i++)
    {
        newBag.add(vector1.at(i));
    }//end for
    
    vector vector2 = aBag.toVector();
    for(int i = 0; i < aBag.getCurrentSize(); i++)
    {
        newBag.add(vector2.at(i));
    }
    return newBag;
}//end bagUnion

template <class ItemType>
ArrayBag<ItemType> ArrayBag<ItemType>::bagIntersection(ArrayBag<ItemType>& aBag)
{
    ArrayBag<ItemType> newBag;
    
    vector vector1 = toVector();
    vector vector2 = aBag.toVector();
    
    for(int i = 0; i < getCurrentSize(); i++)
    {
        if(aBag.contains(vector1.at(i)))
            newBag.add(vector1.at(i));
    }//end for
    return newBag;
}//end bagIntersection


template <class ItemType>
ArrayBag<ItemType> ArrayBag<ItemType>::bagDifference(ArrayBag<ItemType>& aBag)
{
    ArrayBag<ItemType> newBag;
    
    vector vector1 = toVector();
    vector vector2 = aBag.toVector();
    for(int i = 0; i < getCurrentSize(); i++)
    {
        if(!aBag.contains(vector1.at(i)))
            newBag.add(vector1.at(i));
    }//end for
    return newBag;
}//end bagDifference




#include <iostream>
#include <string>
#include "ArrayBag.h"
#include <vector>


//int main()
//{
//    ArrayBag<Student> list;
//    Student student;
//    int n;
//
//    std::cout << "Enter number of students to add to list." << "\n";
//    std::cin >> n;
//
//    for (int i = 0; i < n; i++)
//    {
//        std::cout << "Enter Student Name, student number, student course, section, trimester and status for student " << i + 1 << "\n";
//        std::cin >> student;
//        //list[i].add(student);
//    }//end for
//    std::cout << student;
//    std::cout << "Current List Size: " << list.getCurrentSize() << "\n";
//    std::cout << "IsEmpty? " << list.isEmpty() << "\n";
//
//    return 0;
//    
//} // end main



/*********************************************/

void displayBag(ArrayBag<string>&bag)
{
    cout << "The bag contains " << bag.getCurrentSize()
        << " items:" << endl;
    vector<string> bagItems = bag.toVector();

    int numberOfEntries = (int)bagItems.size();
    for (int i = 0; i < numberOfEntries; i++)
    {
        cout << bagItems[i] << " ";
    }  // end for
    cout << endl << endl;
}  // end displayBag

void bagTester(ArrayBag<string>&bag)
{
    cout << "isEmpty: returns " << bag.isEmpty()
        << "; should be 1 (true)" << endl;
    displayBag(bag);

    string items[] = { "one", "two", "three", "four", "five", "one" };
    cout << "Add 6 items to the bag: " << endl;
    for (int i = 0; i < 6; i++)
    {
        bag.add(items[i]);
    }  // end for

    displayBag(bag);

//    cout << "isEmpty: returns " << bag.isEmpty()
//        << "; should be 0 (false)" << endl;
//
//    cout << "getCurrentSize: returns " << bag.getCurrentSize()
//        << "; should be 6" << endl;
//
//    cout << "Try to add another entry: add(\"extra\") returns "
//        << bag.add("extra") << endl;
//
//    cout << "contains(\"three\"): returns " << bag.contains("three")
//        << "; should be 1 (true)" << endl;
//    cout << "contains(\"ten\"): returns " << bag.contains("ten")
//        << "; should be 0 (false)" << endl;
//    cout << "getFrequencyOf(\"one\"): returns "
//        << bag.getFrequencyOf("one") << " should be 2" << endl;
//    cout << "remove(\"one\"): returns " << bag.remove("one")
//        << "; should be 1 (true)" << endl;
//    cout << "getFrequencyOf(\"one\"): returns "
//        << bag.getFrequencyOf("one") << " should be 1" << endl;
//    cout << "remove(\"one\"): returns " << bag.remove("one")
//        << "; should be 1 (true)" << endl;
//    cout << "remove(\"one\"): returns " << bag.remove("one")
//        << "; should be 0 (false)" << endl;
//    cout << endl;
//
//    displayBag(bag);

//    cout << "After clearing the bag, ";
//    bag.clear();

//    cout << "isEmpty: returns " << bag.isEmpty()
//        << "; should be 1 (true)" << endl;
}  // end bagTester

//int main()
//{
//    ArrayBag<string> bag;
//    cout << "Testing the Array-Based Bag:" << endl;
//    cout << "The initial bag is empty." << endl;
//    bagTester(bag);
//    cout << "All done!" << endl;
//        
//    system("pause");
//
//    return 0;
//}  // end main



int main()
{
    ArrayBag<std::string> bag1;  //Create a new bag
    bagTester(bag1);    //call bagTester to test bag    
    std::cout << "\n";
    
    ArrayBag<std::string> bag2;  //Create a new bag
    
    //Declare a string of items
    std::string items[] = {"ten", "nine", "eight", "seven", "three"};
    
    for(int i = 0; i < 5; i++)
    {
        bag2.add(items[i]);
    }//end for
    displayBag(bag2);
    
    ArrayBag unionBag = bag1.bagUnion(bag2);
    std::cout << "Union Bag: " << endl;
    displayBag(unionBag);
    
    ArrayBag intersectionBag = bag1.bagIntersection(bag2);
    std::cout << "Intersection Bag: " << endl;
    displayBag(intersectionBag);
    
    ArrayBag differenceBag = bag1.bagDifference(bag2);
    std::cout << "Difference Bag: " << endl;
    displayBag(differenceBag);
    
    system("pause");
    
    return 0;
}//end main    





