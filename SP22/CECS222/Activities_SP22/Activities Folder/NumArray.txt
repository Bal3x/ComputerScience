NumArray.h
#pragma once
#include <iostream>

using namespace::std;

class NumArray {

private:
	float* array;
	int ArrSIZE;

public:
	//constructors
	NumArray();
	NumArray(int SIZE);
	NumArray(const NumArray &obj);
	//destructor
	~NumArray();
	//*****************Mutators member functions**************************
	//member function that sets the number of elements in the array
	void setElement(int numElem, int SIZE, float value);

	//*****************Accessors member functions**********************
	//member function that returns the number of elements in the array
	float getElement(int numElem) const;

	//member function that return the highest value of the array
	//int highestValue(NumArray* myNumArray, int SIZE);
	//member function that return the lowest value of the array 
	//int lowestValue(NumArray* myNumArray, int SIZE);
	//member function tha displays the contents of the array
	void display(int n) const;

};

main.cpp
#include <iostream>
#include "NumArray.h"

using namespace::std;
//prototypes
int arraySize();
void storeValuesArray(NumArray*, int, float);
void displayArr(NumArray*, int);
void findHighestValue(NumArray*&, int);

int main() {
	int SIZE;
	int highestValue;
	float value = 0;
	//float values[] = { 38, 64, 18, 45, 29, 44, 95 };
	//ask user for the number of elements in the array
	SIZE = arraySize();
	//create NumArray object
	NumArray* myNumArray;
	//allocate dynamic memory to myNumArray
	myNumArray = new NumArray[SIZE];
	//store values in array
	storeValuesArray(myNumArray, SIZE, value);
	//display the array elements
	displayArr(myNumArray, SIZE);
	//find the highest value of the array
	findHighestValue(myNumArray, SIZE);
	cout << "the highest Value is: " << myNumArray->getElement(0) << endl;
	displayArr(myNumArray, SIZE);
	cout << endl;
	//create a instance from the myNumArray 
	NumArray* numArray(myNumArray);
	displayArr(numArray, SIZE);
	//deallocate dynamic memory
	delete[] myNumArray;
	myNumArray = nullptr;

	return 0;
}
int arraySize () {
	int arrSize;
	cout << "Enter the amount of elements for the array." << endl;
	cin >> arrSize;
	while (arrSize <= 0.0) {
		cout << "Invalid entry please try again." << endl;
		cin >> arrSize;
	}//end while
	return arrSize;
}
void storeValuesArray(NumArray* myNumArray, int SIZE, float value) {
	for (int i = 0; i < SIZE; i++) {
	cout << "Enter value #" << i + 1 << ": " << endl;
	cin >> value;
	myNumArray[i].setElement(i, SIZE, value);
	}//end for
}
void displayArr(NumArray* myNumArray, int SIZE) {
	for (int i = 0; i < SIZE; i++) {
		myNumArray[i].display(i);
	}//end for
}
void findHighestValue(NumArray*& myNumArray, int SIZE) {
	for (int i = 0; i < SIZE - 1; i++) {
		for (int j = 0; j < SIZE - i - 1; j++){
			NumArray* value1 = &myNumArray[i];
			NumArray* value2 = &myNumArray[j];
			if (value1 < value2){
				NumArray temp = *value1;
				*value1 = *value2;
				*value2 = temp; 
			}
		}
		for (int i = 0; i < SIZE; i++) {
			cout << myNumArray[i].getElement(i) << " ";
		}
	//int i, j; 
	//float highVal = 0; 
	//float tempVal = 0;
	//for (i = 0; i < SIZE - 1; i++) {
	//	for (j = 0; j < SIZE; j++){
	//		if ( myNumArray[j].getElement(j) <  myNumArray[j + 1].getElement(j + 1)) {
	//			tempVal = myNumArray[j].getElement(j);
	//			highVal = myNumArray[j + 1].getElement(j + 1);
	//			myNumArray[j + 1].setElement(j, SIZE, tempVal);
	//			myNumArray[j].setElement(j + 1, SIZE, highVal);
	//		}//end if
	//	}//end for
	}//end for
}

NumArray.cpp

#include <iostream>
#include "NumArray.h"

using namespace::std;

//constructor
NumArray::NumArray() {
	//initialize to 0
	const int SIZE = 10;
	array = new float[SIZE];
	ArrSIZE = SIZE;
	for (int i = 0; i < SIZE; i++) {
		array[i] = 0;
	}//end for
}
NumArray::NumArray(int SIZE) {
	ArrSIZE = SIZE;
	//setElement()

}
NumArray::NumArray(const NumArray &obj) {
	array = new float[ArrSIZE];
	for (int i = 0; i < ArrSIZE; i++) {
		array[i] = obj.array[i];
	}
}
//destructor
NumArray::~NumArray() {
	delete[] array;
	array = nullptr;
}
//***************Mutators member functions***********************************
//member function that sets the number of elements in the array
void NumArray::setElement(int numElem, int SIZE, float value) {
	array = new float[SIZE];
	*(array + numElem) = value;
}
//member function that returns the number of elements in the array
float NumArray::getElement(int numElem) const {
	return array[numElem];
}
//member function that returns the highest value of the array

//member function that displays the contents of the array
void NumArray::display(int n) const {
	cout << getElement(n) << " ";
}





